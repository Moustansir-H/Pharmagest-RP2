package mcci.businessschool.bts.sio.slam.pharmagest.medicament.controleur;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import mcci.businessschool.bts.sio.slam.pharmagest.famille.Famille;
import mcci.businessschool.bts.sio.slam.pharmagest.famille.dao.FamilleDao;
import mcci.businessschool.bts.sio.slam.pharmagest.fournisseur.Fournisseur;
import mcci.businessschool.bts.sio.slam.pharmagest.fournisseur.dao.FournisseurDao;
import mcci.businessschool.bts.sio.slam.pharmagest.medicament.Medicament;
import mcci.businessschool.bts.sio.slam.pharmagest.medicament.service.MedicamentService;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

public class MedicamentControleur {

    @FXML
    private TextField nomField, prixAchatField, prixVenteField, stockField, seuilCommandeField, qteMaxField;
    @FXML
    private ComboBox<String> formeCombo, familleCombo, fournisseurCombo;
    @FXML
    private Button ajouterBtn, modifierBtn, supprimerBtn, retourMedicament;
    @FXML
    private TableView<Medicament> tableMedicament;
    @FXML
    private TableColumn<Medicament, Integer> colId;
    @FXML
    private TableColumn<Medicament, String> colNom, colForme, colFamille, colFournisseur;
    @FXML
    private TableColumn<Medicament, Double> colPrixAchat, colPrixVente;
    @FXML
    private TableColumn<Medicament, Integer> colStock, colSeuil, colQteMax;

    private ObservableList<Medicament> donneesMedicament = FXCollections.observableArrayList();
    private ObservableList<String> listeFormes = FXCollections.observableArrayList("Comprim√©", "G√©lule", "Sirop",
            "Injectable", "Poudre", "Granul√©", "Suppositoire",
            "Solution buvable", "Gouttes", "Cr√®me", "Pommade", "Gel", "A√©rosol", "Inhalateur",
            "Patch transdermique");
    private MedicamentService medicamentService;
    private FamilleDao familleDao;
    private FournisseurDao fournisseurDao;

    public MedicamentControleur() throws Exception {
        this.medicamentService = new MedicamentService();
        this.familleDao = new FamilleDao();
        this.fournisseurDao = new FournisseurDao();
    }

    @FXML
    public void initialize() {
        // Initialisation des colonnes du TableView
        colId.setCellValueFactory(new PropertyValueFactory<>("id"));
        colNom.setCellValueFactory(new PropertyValueFactory<>("nom"));
        colForme.setCellValueFactory(new PropertyValueFactory<>("forme"));
        colPrixAchat.setCellValueFactory(new PropertyValueFactory<>("prixAchat"));
        colPrixVente.setCellValueFactory(new PropertyValueFactory<>("prixVente"));
        colStock.setCellValueFactory(new PropertyValueFactory<>("stock"));
        colSeuil.setCellValueFactory(new PropertyValueFactory<>("seuilCommande"));
        colQteMax.setCellValueFactory(new PropertyValueFactory<>("qteMax"));
        colFamille.setCellValueFactory(new PropertyValueFactory<>("familleNom"));
        colFournisseur.setCellValueFactory(new PropertyValueFactory<>("fournisseurNom"));

        // Chargement initial des m√©dicaments
        loadMedicaments();

        // Charger les valeurs des ComboBox
        formeCombo.setItems(listeFormes);
        chargerFamilles();
        chargerFournisseurs();

        tableMedicament.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) remplirFormulaire(newSelection);
        });
    }

    private void loadMedicaments() {
        donneesMedicament.clear();
        List<Medicament> medicaments = medicamentService.recupererMedicaments();
        donneesMedicament.addAll(medicaments);
        tableMedicament.setItems(donneesMedicament);
    }

    private void chargerFamilles() {
        try {
            List<Famille> familles = familleDao.recupererToutesLesFamilles(); // ‚úÖ Utilisation de la nouvelle m√©thode
            ObservableList<String> nomsFamilles = FXCollections.observableArrayList();
            for (Famille f : familles) {
                nomsFamilles.add(f.getNom());
            }
            familleCombo.setItems(nomsFamilles);
        } catch (Exception e) {
            afficherErreur("Erreur chargement des familles : " + e.getMessage());
        }
    }


    private void chargerFournisseurs() {
        try {
            List<Fournisseur> fournisseurs = fournisseurDao.recupererTousLesFournisseurs(); // ‚úÖ Adapter √† ton DAO
            ObservableList<String> nomsFournisseurs = FXCollections.observableArrayList();
            for (Fournisseur f : fournisseurs) {
                nomsFournisseurs.add(f.getNom());
            }
            fournisseurCombo.setItems(nomsFournisseurs);
        } catch (Exception e) {
            afficherErreur("Erreur chargement des fournisseurs : " + e.getMessage());
        }
    }

    private void remplirFormulaire(Medicament medicament) {
        nomField.setText(medicament.getNom());
        formeCombo.setValue(medicament.getForme());
        prixAchatField.setText(String.valueOf(medicament.getPrixAchat()));
        prixVenteField.setText(String.valueOf(medicament.getPrixVente()));
        stockField.setText(String.valueOf(medicament.getStock()));
        seuilCommandeField.setText(String.valueOf(medicament.getSeuilCommande()));
        qteMaxField.setText(String.valueOf(medicament.getQteMax()));
        familleCombo.setValue(medicament.getFamille().getNom());
        fournisseurCombo.setValue(medicament.getFournisseur().getNom());
    }

    @FXML
    private void ajouterMedicament() {
        try {
            if (nomField.getText().isEmpty() || formeCombo.getValue() == null ||
                    prixAchatField.getText().isEmpty() || prixVenteField.getText().isEmpty() ||
                    stockField.getText().isEmpty() || seuilCommandeField.getText().isEmpty() ||
                    qteMaxField.getText().isEmpty() || familleCombo.getValue() == null ||
                    fournisseurCombo.getValue() == null) {
                afficherErreur("Tous les champs doivent √™tre remplis !");
                return;
            }

            String nom = nomField.getText();
            String forme = formeCombo.getValue();
            double prixAchat = Double.parseDouble(prixAchatField.getText());
            double prixVente = Double.parseDouble(prixVenteField.getText());
            int stock = Integer.parseInt(stockField.getText());
            int seuilCommande = Integer.parseInt(seuilCommandeField.getText());
            int qteMax = Integer.parseInt(qteMaxField.getText());

            System.out.println("üîé Famille s√©lectionn√©e : " + familleCombo.getValue());
            System.out.println("üîé Fournisseur s√©lectionn√© : " + fournisseurCombo.getValue());

            // üîç R√©cup√©ration des IDs
            Integer familleId = familleDao.getFamilleIdByName(familleCombo.getValue());
            if (familleId == null) {
                afficherErreur("‚ùå Erreur : la famille s√©lectionn√©e n'existe pas en base !");
                return;
            }

            Integer fournisseurId = fournisseurDao.getFournisseurIdByName(fournisseurCombo.getValue());
            if (fournisseurId == null) {
                afficherErreur("‚ùå Erreur : le fournisseur s√©lectionn√© n'existe pas en base !");
                return;
            }

            System.out.println("üìå ID Famille r√©cup√©r√© : " + familleId);
            System.out.println("üìå ID Fournisseur r√©cup√©r√© : " + fournisseurId);

            // ‚úÖ R√©cup√©ration des objets
            Famille famille = familleDao.getFamilleById(familleId);
            Fournisseur fournisseur = fournisseurDao.getFournisseurById(fournisseurId);

            // V√©rification apr√®s r√©cup√©ration
            System.out.println("üìå Objet Famille r√©cup√©r√© : " + (famille != null ? famille.getNom() : "null"));
            System.out.println("üìå Objet Fournisseur r√©cup√©r√© : " + (fournisseur != null ? fournisseur.getNom() : "null"));

            if (famille == null) {
                afficherErreur("‚ùå Erreur : Impossible de r√©cup√©rer la famille s√©lectionn√©e !");
                return;
            }

            if (fournisseur == null) {
                afficherErreur("‚ùå Erreur : Impossible de r√©cup√©rer le fournisseur s√©lectionn√© !");
                return;
            }

            // üî• Cr√©ation du m√©dicament
            Medicament medicament = new Medicament(nom, forme, prixAchat, prixVente, stock, seuilCommande, qteMax, famille, fournisseur);

            // ‚úÖ V√©rification avant insertion en base
            System.out.println("üÜï Ajout d'un m√©dicament : " + medicament.getNom());
            System.out.println("üìå Forme : " + medicament.getForme());
            System.out.println("üìå Prix Achat : " + medicament.getPrixAchat());
            System.out.println("üìå Prix Vente : " + medicament.getPrixVente());
            System.out.println("üìå Stock : " + medicament.getStock());
            System.out.println("üìå Seuil : " + medicament.getSeuilCommande());
            System.out.println("üìå Quantit√© max : " + medicament.getQteMax());
            System.out.println("üìå Famille : " + (medicament.getFamille() != null ? medicament.getFamille().getNom() : "null"));
            System.out.println("üìå Fournisseur : " + (medicament.getFournisseur() != null ? medicament.getFournisseur().getNom() : "null"));

            // V√©rifie avant d‚Äôins√©rer en base
            if (medicament.getFamille() == null || medicament.getFournisseur() == null) {
                afficherErreur("‚ùå Erreur : Famille ou Fournisseur non r√©cup√©r√©s correctement !");
                return;
            }

            // ‚úÖ Ajout en base de donn√©es
            Integer idGenere = medicamentService.ajouterMedicament(medicament);
            System.out.println("‚úÖ ID g√©n√©r√© apr√®s insertion : " + idGenere);

            if (idGenere == null) {
                afficherErreur("‚ùå L'ajout du m√©dicament a √©chou√© !");
            } else {
                afficherMessage("‚úÖ Succ√®s", "M√©dicament ajout√© avec succ√®s !");
                loadMedicaments();
            }

        } catch (NumberFormatException e) {
            afficherErreur("‚ùå Erreur de format : V√©rifiez les champs num√©riques !");
        } catch (SQLException e) {
            afficherErreur("‚ùå Erreur SQL : " + e.getMessage());
        } catch (Exception e) {
            afficherErreur("‚ùå Erreur inattendue : " + e.getMessage());
        }
    }


    @FXML
    private void modifierMedicament() {
        Medicament medicamentSelectionne = tableMedicament.getSelectionModel().getSelectedItem();
        if (medicamentSelectionne == null) {
            afficherErreur("Veuillez s√©lectionner un m√©dicament.");
            return;
        }

        try {
            // üìå Log avant modification
            System.out.println("üîç M√©dicament s√©lectionn√© pour modification : " + medicamentSelectionne.getNom() + " (ID: " + medicamentSelectionne.getId() + ")");

            // R√©cup√©ration des nouvelles valeurs du formulaire
            String nouveauNom = nomField.getText();
            String nouvelleForme = formeCombo.getValue();
            double nouveauPrixAchat = Double.parseDouble(prixAchatField.getText());
            double nouveauPrixVente = Double.parseDouble(prixVenteField.getText());
            int nouveauStock = Integer.parseInt(stockField.getText());
            int nouveauSeuilCommande = Integer.parseInt(seuilCommandeField.getText());
            int nouvelleQteMax = Integer.parseInt(qteMaxField.getText());

            System.out.println("üÜï Modification - Nouveau Nom : " + nouveauNom);
            System.out.println("üÜï Modification - Nouvelle Forme : " + nouvelleForme);
            System.out.println("üÜï Modification - Nouveau Prix Achat : " + nouveauPrixAchat);
            System.out.println("üÜï Modification - Nouveau Prix Vente : " + nouveauPrixVente);
            System.out.println("üÜï Modification - Nouveau Stock : " + nouveauStock);
            System.out.println("üÜï Modification - Nouveau Seuil Commande : " + nouveauSeuilCommande);
            System.out.println("üÜï Modification - Nouvelle Quantit√© Max : " + nouvelleQteMax);

            // üîç V√©rification et r√©cup√©ration des IDs des nouvelles valeurs
            Integer familleId = familleDao.getFamilleIdByName(familleCombo.getValue());
            Integer fournisseurId = fournisseurDao.getFournisseurIdByName(fournisseurCombo.getValue());

            if (familleId == null || fournisseurId == null) {
                afficherErreur("‚ùå Erreur : Famille ou fournisseur non trouv√© !");
                return;
            }

            System.out.println("üìå ID Famille r√©cup√©r√© : " + familleId);
            System.out.println("üìå ID Fournisseur r√©cup√©r√© : " + fournisseurId);

            // R√©cup√©ration des objets Famille et Fournisseur
            Famille nouvelleFamille = familleDao.getFamilleById(familleId);
            Fournisseur nouveauFournisseur = fournisseurDao.getFournisseurById(fournisseurId);

            if (nouvelleFamille == null || nouveauFournisseur == null) {
                afficherErreur("‚ùå Erreur : Impossible de r√©cup√©rer la famille ou le fournisseur s√©lectionn√© !");
                return;
            }

            System.out.println("üìå Objet Famille r√©cup√©r√© : " + nouvelleFamille.getNom());
            System.out.println("üìå Objet Fournisseur r√©cup√©r√© : " + nouveauFournisseur.getNom());

            // Mise √† jour des valeurs du m√©dicament s√©lectionn√©
            medicamentSelectionne.setNom(nouveauNom);
            medicamentSelectionne.setForme(nouvelleForme);
            medicamentSelectionne.setPrixAchat(nouveauPrixAchat);
            medicamentSelectionne.setPrixVente(nouveauPrixVente);
            medicamentSelectionne.setStock(nouveauStock);
            medicamentSelectionne.setSeuilCommande(nouveauSeuilCommande);
            medicamentSelectionne.setQteMax(nouvelleQteMax);
            medicamentSelectionne.setFamille(nouvelleFamille);
            medicamentSelectionne.setFournisseur(nouveauFournisseur);

            // üî• Appel de la modification en base de donn√©es
            medicamentService.modifierMedicament(medicamentSelectionne);

            System.out.println("‚úÖ M√©dicament modifi√© avec succ√®s !");

            afficherMessage("Succ√®s", "M√©dicament modifi√© !");
            loadMedicaments(); // Recharger les donn√©es pour voir le changement

        } catch (NumberFormatException e) {
            afficherErreur("‚ùå Erreur de format : V√©rifiez les champs num√©riques !");
        } catch (Exception e) {
            afficherErreur("‚ùå Erreur inattendue : " + e.getMessage());
        }
    }


    @FXML
    private void supprimerMedicament() {
        Medicament medicamentSelectionne = tableMedicament.getSelectionModel().getSelectedItem();
        if (medicamentSelectionne == null) {
            afficherErreur("Veuillez s√©lectionner un m√©dicament.");
            return;
        }

        try {
            medicamentService.supprimerMedicamentParId(medicamentSelectionne.getId());
            afficherMessage("Succ√®s", "M√©dicament supprim√© !");
            loadMedicaments();
        } catch (Exception e) {
            afficherErreur("Erreur lors de la suppression : " + e.getMessage());
        }
    }


    private void afficherErreur(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Erreur");
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void afficherMessage(String titre, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(titre);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    public void retourMedicamentOnAction(ActionEvent e) {
        try {
            System.out.println("üîÑ Bouton Retour cliqu√© !");

            FXMLLoader loader = new FXMLLoader(getClass().getResource("/maintenance/Maintenance.fxml"));
            Scene nouvelleScene = new Scene(loader.load());

            // V√©rification du Stage
            Stage stage = (Stage) retourMedicament.getScene().getWindow();
            System.out.println("‚úÖ Chargement r√©ussi, affichage de Maintenance.fxml");

            // Afficher la nouvelle sc√®ne
            stage.setScene(nouvelleScene);
        } catch (IOException ex) {
            System.err.println("‚ùå Erreur lors du retour √† Maintenance : " + ex.getMessage());
            ex.printStackTrace();
        }
    }


}
